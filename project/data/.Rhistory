sample.all[i] <- sample[[i]]
}
sample.all
sample.all <- numeric(length(unique(pools$stream)))
sample.all
sample.all <- numeric(length(n.10))
for(i in 1:16){
sample.all[i] <- sample[[i]]
}
sample.all <- numeric(length(n.10))
for(i in 1:length(n.10)){
sample.all[i] <- sample[[i]]
}
sample.all
sample.all <- numeric(length(n.10))
sample.al
sample.all
sample[[3]]
sample[[4]]
sample
sample <- apply(rbind("Brooks Creek", "Buncombe Hollow Creek", "Bypass Channel", "Cape Horn Creek", "Cougar Creek", "Dog Creek", "Indian George Creek", "Jim Creek", "Lower Speelyai", "North Siouxon Creek", "Ole Creek", "Panamaker Creek", "Siouxon Creek", "Speelyai Creek", "West Fork Speelyai Creek", "West Tributary Speelyai Creek"), 1, sample.fun)
sample.all <- numeric(length(n.10))
for(i in 1:length(n.10)){
sample.all[i] <- sample[[i]]
}
sample
sample.all <- numeric(length(n.10))
for(i in 1:length(unique(pools$stream))){
sample.all[i] <- sample[[i]]
}
sample.all <- numeric(length(n.10))
for(i in 1:16){
sample.all[i] <- sample[[i]]
}
sample
sample
sample.all
sample.all <- c(sample[[1]], sample[[2]], sample[[3]], sample[[4]], sample[[5]], sample[[6]], sample[[7]])
sample.all
sample.fun("Brooks Creek")
sample.fun("Brooks Creek")
sample.fun("Brooks Creek")
test <- sample.fun("Brooks Creek")
test[1]
test
sample.brooks <- sample.fun("Brooks Creek")
sample.brooks
sample.bun <- sample.fun("Buncombe Hollow Creek")
c(sample.brooks, sample.bun)
c(as.character(sample.brooks), sample.bun)
sample.brooks <- as.character(sample.fun("Brooks Creek"))
sample.brooks
sample.fun <- function(stream_name){
sample(numeric(subset(pools, stream == stream_name)$reach),
size = n.10[which(length.totals == stream_name)],
prob = length.probs[which(pools == stream_name)])
}
sample.brooks <- as.character(sample.fun("Brooks Creek"))
sample.brooks <- sample.fun("Brooks Creek")
sample.fun <- function(stream_name){
sample <- sample(subset(pools, stream == stream_name)$reach,
size = n.10[which(length.totals == stream_name)],
prob = length.probs[which(pools == stream_name)])
return(numeric(sample))
}
sample.fun
sample.brooks <- sample.fun("Brooks Creek")
sample.fun <- function(stream_name){
sample <- sample(subset(pools, stream == stream_name)$reach,
size = n.10[which(length.totals == stream_name)],
prob = length.probs[which(pools == stream_name)])
return(factor(sample))
}
sample.brooks <- sample.fun("Brooks Creek")
sample.brooks
head(pools)
which(pools==sample.brooks)
which(pools=="BRK_001")
pools[which(pools=="BRK_001"),]
subset(pools, reach == "BRK_001")
which(pools$reach=="BRK_001")
which(pools$reach==brooks.sample)
which(pools$reach==sample.brooks)
pools$reach.num <- 1:109
head(pools)
sample.fun <- function(stream_name){
sample <- sample(subset(pools, stream == stream_name)$reach.num,
size = n.10[which(length.totals == stream_name)],
prob = length.probs[which(pools == stream_name)])
return(factor(sample))
}
sample.fun
sample.brooks <- sample.fun("Brooks Creek")
sample.brooks
sample <- apply(rbind("Brooks Creek", "Buncombe Hollow Creek", "Bypass Channel", "Cape Horn Creek", "Cougar Creek", "Dog Creek", "Indian George Creek", "Jim Creek", "Lower Speelyai", "North Siouxon Creek", "Ole Creek", "Panamaker Creek", "Siouxon Creek", "Speelyai Creek", "West Fork Speelyai Creek", "West Tributary Speelyai Creek"), 1, sample.fun)
sample.all <- c(sample[[1]], sample[[2]], sample[[3]], sample[[4]], sample[[5]], sample[[6]], sample[[7]])
sample.bun <- sample.fun("Buncombe Hollow Creek")
sample.bun
c(sample.brooks, sample.bun)
sample.fun <- function(stream_name){
sample <- sample(subset(pools, stream == stream_name)$reach.num,
size = n.10[which(length.totals == stream_name)],
prob = length.probs[which(pools == stream_name)])
return(sample)
}
sample.brooks <- sample.fun("Brooks Creek")
sample.brooks
sample.bun <- sample.fun("Buncombe Hollow Creek")
sample.bun
c(sample.brooks, sample.bun)
unique(pools$stream)
apply(rbind("Brooks Creek", "Buncombe Hollow Creek"), 1, sample.fun)
unlist(apply(rbind("Brooks Creek", "Buncombe Hollow Creek"), 1, sample.fun))
sample.all <- unlist(apply(rbind("Brooks Creek", "Buncombe Hollow Creek", "Bypass Channel", "Cape Horn Creek", "Cougar Creek", "Dog Creek", "Indian George Creek", "Jim Creek", "Lower Speelyai", "North Siouxon Creek", "Ole Creek", "Panamaker Creek", "Siouxon Creek", "Speelyai Creek", "West Fork Speelyai Creek", "West Tributary Speelyai Creek"), 1, sample.fun))
sample.all <- unlist(apply(rbind("Brooks Creek", "Buncombe Hollow Creek", "Bypass Channel", "Cape Horn Creek", "Cougar Creek", "Dog Creek", "Indian George Creek"), 1, sample.fun))
sample.all <- unlist(apply(rbind("Brooks Creek", "Buncombe Hollow Creek", 1, sample.fun))
sample.all <- unlist(apply(rbind("Brooks Creek", "Buncombe Hollow Creek"), 1, sample.fun))
sample.all <- unlist(apply(rbind("Brooks Creek", "Buncombe Hollow Creek", "Bypass Channel", "Cape Horn Creek"), 1, sample.fun))
sample.all <- unlist(apply(rbind("Brooks Creek", "Buncombe Hollow Creek", "Bypass Channel", "Cape Horn Creek", "Cougar Creek", "Dog Creek", "Indian George Creek"), 1, sample.fun))
sample.all <- unlist(apply(rbind("Brooks Creek", "Buncombe Hollow Creek", "Bypass Channel", "Cape Horn Creek", "Cougar Creek"), 1, sample.fun))
sample.all <- unlist(apply(rbind("Brooks Creek", "Buncombe Hollow Creek", "Bypass Channel", "Cape Horn Creek", "Cougar Creek", "Dog Creek"), 1, sample.fun))
sample.fun("Dog Creek")
length.probs[which(pools == "Dog Creek")]
n.10[which(length.totals == "Dog Creek")]
sample(2, size = 1, prob = 1)
sample.fun <- function(stream_name){
sample <- sample(subset(pools, stream == stream_name)$reach.num,
size = n.10[which(length.totals == stream_name)],
prob = length.probs[which(pools == stream_name)],
replace = FALSE)
return(sample)
}
sample.fun("Brooks Creek")
sample(c(2,3), size = 2, prob =c(1,2))
sample(c(2), size = 1, prob =c(1))
sample(c(2), size = 1)
length(pools=="Dog Creek")
length(pools$stream=="Dog Creek")
length(subset(pools, stream=="Dog Creek"))
length(subset(pools, stream=="Dog Creek")$stream)
sample.fun <- function(stream_name){
sample <- ifelse(length(subset(pools, stream==stream_name)$stream) > 1,
sample(subset(pools, stream == stream_name)$reach.num,
size = n.10[which(length.totals == stream_name)],
prob = length.probs[which(pools == stream_name)],
replace = FALSE),
sample(subset(pools, stream == stream_name)$reach.num,
size = n.10[which(length.totals == stream_name)],
replace = FALSE))
return(sample)
}
sample.fun("Dog Creek")
sample.fun("Dog Creek")
sample.fun("Dog Creek")
sample.fun("Dog Creek")
sample.fun("Dog Creek")
sample.fun("Dog Creek")
sample.fun("Dog Creek")
sample.fun <- function(stream_name){
sample <- sample(subset(pools, stream == stream_name)$reach.num,
size = n.10[which(length.totals == stream_name)],
prob = length.probs[which(pools == stream_name)],
replace = FALSE)
return(sample)
}
sample.dog <- sample(subset(pools, stream == "Dog Creek")$reach.num,
size = n.10[which(length.totals == "Dog Creek")])
sample.dog
sample.dog <- sample(subset(pools, stream == "Dog Creek")$reach.num,
size = n.10[which(length.totals == "Dog Creek")])
sample.dog
head(pools)
pools
sample.brooks <- sample.fun("Brooks Creek")
sample.bun <- sample.fun("Buncombe Hollow Creek")
sample.bypass <- sample.fun("Bypass Channel")
sample.cape <- sample.fun("Cape Horn Creek")
sample.cougar <- sample.fun("Cougar Creek")
sample.dog <- 48
sample.indian <- sample.fun("Indian George Creek")
sample.jim <- sample.fun("Jim Creek")
sample.lsp <- 58
sample.nsioux <- sample.fun("North Siouxon Creek")
sample.ole <- sample.fun("Ole Creek")
sample.pan <- sample.fun("Panamaker Creek")
sample.sioux <- sample.fun("Siouxon Creek")
sample.sp <- sample.fun("Speelyai Creek")
sample.wfsp <- sample.fun("West Fork Speelyai Creek")
sample.wtsp <- sample.fun("West Tributary Speelyai Creek")
sample.all <- c(sample.brooks, sample.bun, sample.bypass, sample.cape, sample.dog, sample.indian, sample.jim, sample.lsp, sample.nsioux, sample.ole, sample.pan, sample.sioux, sample.sp, sample.wfsp, sample.wtsp)
sample.all
which(sample.all)
pools[c(sample.all),]
nsim <- 10
pools$reach.num <- 1:109
sample.fun <- function(stream_name){
sample <- sample(subset(pools, stream == stream_name)$reach.num,
size = n.10[which(length.totals == stream_name)],
prob = length.probs[which(pools == stream_name)],
replace = FALSE)
return(sample)
}
strata.uneq <- function(n_vec){
sample,all <- matrix(NA, nrow = sum(n_vec), ncol = nsim)
for(i in 1:nsim){
sample.brooks <- sample.fun("Brooks Creek")
sample.bun <- sample.fun("Buncombe Hollow Creek")
sample.bypass <- sample.fun("Bypass Channel")
sample.cape <- sample.fun("Cape Horn Creek")
sample.cougar <- sample.fun("Cougar Creek")
sample.dog <- 48
sample.indian <- sample.fun("Indian George Creek")
sample.jim <- sample.fun("Jim Creek")
sample.lsp <- 58
sample.nsioux <- sample.fun("North Siouxon Creek")
sample.ole <- sample.fun("Ole Creek")
sample.pan <- sample.fun("Panamaker Creek")
sample.sioux <- sample.fun("Siouxon Creek")
sample.sp <- sample.fun("Speelyai Creek")
sample.wfsp <- sample.fun("West Fork Speelyai Creek")
sample.wtsp <- sample.fun("West Tributary Speelyai Creek")
sample.all[, i] <- c(sample.brooks, sample.bun, sample.bypass, sample.cape,
sample.dog, sample.indian, sample.jim, sample.lsp,
sample.nsioux, sample.ole, sample.pan, sample.sioux,
sample.sp, sample.wfsp, sample.wtsp)
}
return(sample.all)
}
pools$reach.num <- 1:109
sample.fun <- function(stream_name){
sample <- sample(subset(pools, stream == stream_name)$reach.num,
size = n.10[which(length.totals == stream_name)],
prob = length.probs[which(pools == stream_name)],
replace = FALSE)
return(sample)
}
strata.uneq <- function(n_vec){
sample.all <- matrix(NA, nrow = sum(n_vec), ncol = nsim)
for(i in 1:nsim){
sample.brooks <- sample.fun("Brooks Creek")
sample.bun <- sample.fun("Buncombe Hollow Creek")
sample.bypass <- sample.fun("Bypass Channel")
sample.cape <- sample.fun("Cape Horn Creek")
sample.cougar <- sample.fun("Cougar Creek")
sample.dog <- 48
sample.indian <- sample.fun("Indian George Creek")
sample.jim <- sample.fun("Jim Creek")
sample.lsp <- 58
sample.nsioux <- sample.fun("North Siouxon Creek")
sample.ole <- sample.fun("Ole Creek")
sample.pan <- sample.fun("Panamaker Creek")
sample.sioux <- sample.fun("Siouxon Creek")
sample.sp <- sample.fun("Speelyai Creek")
sample.wfsp <- sample.fun("West Fork Speelyai Creek")
sample.wtsp <- sample.fun("West Tributary Speelyai Creek")
sample.all[, i] <- c(sample.brooks, sample.bun, sample.bypass, sample.cape,
sample.dog, sample.indian, sample.jim, sample.lsp,
sample.nsioux, sample.ole, sample.pan, sample.sioux,
sample.sp, sample.wfsp, sample.wtsp)
}
return(sample.all)
}
sample.10 <- strata.uneq(n.10)
sample.all
length(sample.all)
pools$reach.num <- 1:109
sample.fun <- function(stream_name){
sample <- sample(subset(pools, stream == stream_name)$reach.num,
size = n.10[which(length.totals == stream_name)],
prob = length.probs[which(pools == stream_name)],
replace = FALSE)
return(sample)
}
strata.uneq <- function(n_vec){
sample.all <- matrix(NA, nrow = sum(n_vec), ncol = nsim)
for(i in 1:nsim){
sample.brooks <- sample.fun("Brooks Creek")
sample.bun <- sample.fun("Buncombe Hollow Creek")
sample.bypass <- sample.fun("Bypass Channel")
sample.cape <- sample.fun("Cape Horn Creek")
sample.cougar <- sample.fun("Cougar Creek")
sample.dog <- 48
sample.indian <- sample.fun("Indian George Creek")
sample.jim <- sample.fun("Jim Creek")
sample.lsp <- 58
sample.nsioux <- sample.fun("North Siouxon Creek")
sample.ole <- sample.fun("Ole Creek")
sample.pan <- sample.fun("Panamaker Creek")
sample.sioux <- sample.fun("Siouxon Creek")
sample.sp <- sample.fun("Speelyai Creek")
sample.wfsp <- sample.fun("West Fork Speelyai Creek")
sample.wtsp <- sample.fun("West Tributary Speelyai Creek")
sample.all[, i] <- c(sample.brooks, sample.bun, sample.bypass, sample.cape,
sample.cougar,
sample.dog, sample.indian, sample.jim, sample.lsp,
sample.nsioux, sample.ole, sample.pan, sample.sioux,
sample.sp, sample.wfsp, sample.wtsp)
}
return(sample.all)
}
sample.10 <- strata.uneq(n.10)
sample.10
pi.10 <- numeric(length(pools$reach))
for(i in 1:length(pools$reach)) {
pi.10[i] <- sum(sample.10==i)/nsim
}
pi.10
pools$reach.num <- 1:109
sample.fun <- function(stream_name){
sample <- sample(subset(pools, stream == stream_name)$reach.num,
size = n.10[which(length.totals == stream_name)],
prob = length.probs[which(pools == stream_name)],
replace = FALSE)
return(sample)
}
nsim <- 1000
strata.uneq <- function(n_vec){
sample.all <- matrix(NA, nrow = sum(n_vec), ncol = nsim)
for(i in 1:nsim){
sample.brooks <- sample.fun("Brooks Creek")
sample.bun <- sample.fun("Buncombe Hollow Creek")
sample.bypass <- sample.fun("Bypass Channel")
sample.cape <- sample.fun("Cape Horn Creek")
sample.cougar <- sample.fun("Cougar Creek")
sample.dog <- 48
sample.indian <- sample.fun("Indian George Creek")
sample.jim <- sample.fun("Jim Creek")
sample.lsp <- 58
sample.nsioux <- sample.fun("North Siouxon Creek")
sample.ole <- sample.fun("Ole Creek")
sample.pan <- sample.fun("Panamaker Creek")
sample.sioux <- sample.fun("Siouxon Creek")
sample.sp <- sample.fun("Speelyai Creek")
sample.wfsp <- sample.fun("West Fork Speelyai Creek")
sample.wtsp <- sample.fun("West Tributary Speelyai Creek")
sample.all[, i] <- c(sample.brooks, sample.bun, sample.bypass, sample.cape,
sample.cougar,
sample.dog, sample.indian, sample.jim, sample.lsp,
sample.nsioux, sample.ole, sample.pan, sample.sioux,
sample.sp, sample.wfsp, sample.wtsp)
}
return(sample.all)
}
sample.10 <- strata.uneq(n.10)
for(i in 1:length(pools$reach)) {
pi.10[i] <- sum(sample.10==i)/nsim
}
pi.10
sample.10
xyplot(pi.10~length|stream, data = pools)
pi.10
sum(pi.10)
n.30
#leslie's working directory
setwd("~/Documents/Stat446/project/data")
#Chris- add your working directory here
#read in data of streams, reaches, and reach lengths (this was built in previous code)
reach.dat <- read.csv("reachdat.csv")
#add a column for stream ID
reach.dat$streamID <- as.numeric(reach.dat$stream)
#add a column for reach ID
reach.dat$reachID <- 1:109
#add probabilities of selecting each reach, within each stream (prop to length)
length.totals <- reach.dat %>%
group_by(stream) %>%
summarise(totals = sum(length))
reach.dat <- merge(reach.dat, length.totals, by  = "stream")
reach.dat$length.probs <- with(reach.dat, length/totals)
#reorder columns (this just makes me happier)
reach.dat <- reach.dat[, c("stream","streamID","reach","reachID", "length",
"length.probs", "totals")]
require(lattice)
require(sampling)
require(dplyr)
#add a column for stream ID
reach.dat$streamID <- as.numeric(reach.dat$stream)
#add a column for reach ID
reach.dat$reachID <- 1:109
#add probabilities of selecting each reach, within each stream (prop to length)
length.totals <- reach.dat %>%
group_by(stream) %>%
summarise(totals = sum(length))
reach.dat <- merge(reach.dat, length.totals, by  = "stream")
reach.dat$length.probs <- with(reach.dat, length/totals)
#reorder columns (this just makes me happier)
reach.dat <- reach.dat[, c("stream","streamID","reach","reachID", "length",
"length.probs", "totals")]
nsim <- 10000
#this function draws a unequal probability sample within each stream
sample.fun.pi <- function(stream.no, n.vec){
sample <-
#ifelse statement to deal with the streams that have only 1 reach
ifelse(length(reach.dat[reach.dat$streamID==stream.no, "reachID"]) == 1,
#this line says to sample that one reach, if the stream only has one reach
reach.dat[which(reach.dat$streamID==stream.no), "reachID"],
#if more than one reach, draw a uneq prob sample of size n.vec
list(sample(subset(reach.dat, streamID == stream.no)$reachID,
size = n.vec[stream.no],
#probabilities proportional to length
prob = reach.dat[reach.dat$streamID == stream.no, "length.probs"],
#without replacement
replace = FALSE)))
return(unlist(sample))
}
strata.uneq.pi <- function(n.vec){
#store nsim samples in a matrix called sample.all
sample.all <- matrix(NA, nrow = sum(n.vec), ncol = nsim)
for(i in 1:nsim){
#for each sample, apply the above function to all the streams
sample.all[, i] <- unlist(apply(cbind(1:length(unique(reach.dat$streamID))), 1,
sample.fun.pi, n.vec))
}
return(sample.all)
}
#define sample sizes
n.10 <- c(2,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1)
n.20 <- c(3,2,2,1,2,1,1,1,1,1,1,1,2,5,1,1)
n.30 <- c(5,3,3,1,2,1,2,1,1,1,2,1,2,7,2,2)
n.40 <- c(7,4,4,1,3,1,3,1,1,1,2,1,3,9,2,2)
#for me, so I don't have to run simulations every time
sample.10 <- read.csv("sample10.csv")
sample.20 <- read.csv("sample20.csv")
sample.30 <- read.csv("sample30, csv")
sample.40 <- read.csv("sample40.csv")
#for each sample size, calculate the inclusion probabilities for each reach
pi.10 <- numeric(length(reach.dat$reach))
for(i in 1:length(reach.dat$reach)) {
#total number of times the reach is sampled out of the total num of sims
pi.10[i] <- sum(sample.10==i)/nsim
}
sample.30 <- read.csv("sample30.csv")
#for each sample size, calculate the inclusion probabilities for each reach
pi.10 <- numeric(length(reach.dat$reach))
for(i in 1:length(reach.dat$reach)) {
#total number of times the reach is sampled out of the total num of sims
pi.10[i] <- sum(sample.10==i)/nsim
}
pi.20 <- numeric(length(reach.dat$reach))
for(i in 1:length(reach.dat$reach)) {
pi.20[i] <- sum(sample.20==i)/nsim
}
pi.20 <- numeric(length(reach.dat$reach))
for(i in 1:length(reach.dat$reach)) {
pi.20[i] <- sum(sample.20==i)/nsim
}
nsim
xyplot(pi.10~length|stream, data = pools)
xyplot(pi.10~length|stream, data = reach.dat)
xyplot(pi.20~length|stream, data = reach.dat)
reach.dat$y <- rnorm(length(reach.dat$reach), 60, 10)
#also find number of reaches in each stream
num.reaches <- unlist(with(reach.dat, tapply(reach, stream, length)))
nsim
ht.fun <- function(simnum){
reach <- sample.40[, simnum]
pi <- pi.40[sample.40[, simnum]]
y <- reach.dat[sample.40[, simnum], "y"]
stream <- reach.dat[sample.40[, simnum], "stream"]
data <- cbind.data.frame(reach, pi, y, stream)
ht.strata <- data %>%
tbl_df %>%
group_by(stream) %>%
summarise(total = sum(y/pi)) %>%
mutate(size = num.reaches) %>%
mutate(mean = total/size)
return(ht.strata[, "mean"])
}
ht.fun(1)
ht.fun <- function(simnum, sample.n, pi.n){
reach <- sample.n[, simnum]
pi <- pi.n[sample.n[, simnum]]
y <- reach.dat[sample.n[, simnum], "y"]
stream <- reach.dat[sample.n[, simnum], "stream"]
data <- cbind.data.frame(reach, pi, y, stream)
ht.strata <- data %>%
tbl_df %>%
group_by(stream) %>%
summarise(total = sum(y/pi)) %>%
mutate(size = num.reaches) %>%
mutate(mean = total/size)
return(ht.strata[, "mean"])
}
ht.fun(1, sample.10, pi.10)
rbind(1:10)
cbind(1:10)
ht.means <- apply(cbind(1:10), 1, ht.fun, sample.n = sample.10, pi.n = pi.10)
ht.means
ht.means.10 <- unlist(apply(cbind(1:10), 1, ht.fun, sample.n = sample.10, pi.n = pi.10))
ht.means.10
ht.means.10 <- apply(cbind(1:10), 1, ht.fun, sample.n = sample.10, pi.n = pi.10)
ht.means.10
pi.30 <- numeric(length(reach.dat$reach))
for(i in 1:length(reach.dat$reach)) {
pi.30[i] <- sum(sample.30==i)/nsim
}
data.frame(ht.means.10)
pi.10
pi.40 <- numeric(length(reach.dat$reach))
for(i in 1:length(reach.dat$reach)) {
pi.40[i] <- sum(sample.40==i)/nsim
}
getwd()
write.csv(pi.10, "pi10.csv", row.names = FALSE)
write.csv(pi.20, "pi10.csv", row.names = FALSE)
write.csv(pi.30, "pi30.csv", row.names = FALSE)
write.csv(pi.40, "pi40.csv", row.names = FALSE)
write.csv(pi.20, "pi20.csv", row.names = FALSE)
write.csv(pi.10, "pi10.csv", row.names = FALSE)
pi.10 <- read.csv("pi10.csv")
pi.20 <- read.csv("pi20.csv")
pi.30 <- read.csv("pi30.csv")
pi.40 <- read.csv("pi40.csv")
